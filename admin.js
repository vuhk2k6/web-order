function getOrders() {
    const orders = localStorage.getItem('orders');
    return orders ? JSON.parse(orders) : [];
}

function saveOrders(orders) {
    localStorage.setItem('orders', JSON.stringify(orders));
}

function getMenuItems() {
    const menuItems = localStorage.getItem('menuItems');
    if (!menuItems) {
        const defaultMenu = [
            { id: 1, name: 'Burger C·ªï ƒêi·ªÉn', description: 'B√°nh m√¨ m·ªÅm, th·ªãt b√≤ t∆∞∆°i, ph√¥ mai, rau x√† l√°ch v√† s·ªët ƒë·∫∑c bi·ªát', price: 150000, emoji: 'üçî', gradient: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' },
            { id: 2, name: 'Pizza H·∫£i S·∫£n', description: 'Pizza gi√≤n v·ªõi t√¥m, m·ª±c, ngh√™u v√† ph√¥ mai mozzarella', price: 220000, emoji: 'üçï', gradient: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)' },
            { id: 3, name: 'Ph·ªü B√≤ ƒê·∫∑c Bi·ªát', description: 'Ph·ªü truy·ªÅn th·ªëng v·ªõi n∆∞·ªõc d√πng ƒë·∫≠m ƒë√†, th·ªãt b√≤ t∆∞∆°i', price: 85000, emoji: 'üçú', gradient: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)' },
            { id: 4, name: 'G√† R√°n Gi√≤n', description: 'G√† t∆∞∆°i t·∫©m gia v·ªã ƒë·∫∑c bi·ªát, chi√™n gi√≤n v√†ng ∆∞∆°m', price: 120000, emoji: 'üçó', gradient: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)' },
            { id: 5, name: 'M√¨ √ù S·ªët B√≤ B·∫±m', description: 'M√¨ √ù al dente v·ªõi s·ªët c√† chua v√† th·ªãt b√≤ b·∫±m th∆°m ngon', price: 135000, emoji: 'üçù', gradient: 'linear-gradient(135deg, #30cfd0 0%, #330867 100%)' },
            { id: 6, name: 'C∆°m S∆∞·ªùn B√¨ Ch·∫£', description: 'C∆°m tr·∫Øng v·ªõi s∆∞·ªùn n∆∞·ªõng, b√¨ v√† ch·∫£ tr·ª©ng th∆°m l·ª´ng', price: 95000, emoji: 'üç±', gradient: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)' }
        ];
        localStorage.setItem('menuItems', JSON.stringify(defaultMenu));
        return defaultMenu;
    }
    return JSON.parse(menuItems);
}

function saveMenuItems(items) {
    localStorage.setItem('menuItems', JSON.stringify(items));
}

function formatCurrency(amount) {
    return amount.toLocaleString('vi-VN') + 'ƒë';
}

function formatDate(isoString) {
    const date = new Date(isoString);
    return date.toLocaleString('vi-VN');
}

function displayOrders() {
    const orders = getOrders();
    const ordersTableBody = document.getElementById('orders-table-body');
    
    if (!ordersTableBody) return;

    if (orders.length === 0) {
        ordersTableBody.innerHTML = `
            <tr>
                <td colspan="7" style="text-align: center; padding: 2rem; color: #666;">
                    Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o
                </td>
            </tr>
        `;
        return;
    }

    ordersTableBody.innerHTML = orders.reverse().map(order => `
        <tr>
            <td>${order.id}</td>
            <td>${order.customerName}</td>
            <td>${order.phone}</td>
            <td>${formatCurrency(order.total)}</td>
            <td><span class="status-badge status-${order.status.toLowerCase().replace(' ', '-')}">${order.status}</span></td>
            <td>${formatDate(order.createdAt)}</td>
            <td>
                <button class="btn-small btn-info" onclick="viewOrderDetails('${order.id}')">Chi ti·∫øt</button>
                <button class="btn-small btn-success" onclick="updateOrderStatus('${order.id}')">C·∫≠p nh·∫≠t</button>
                <button class="btn-small btn-danger" onclick="deleteOrder('${order.id}')">X√≥a</button>
            </td>
        </tr>
    `).join('');
}

function viewOrderDetails(orderId) {
    const orders = getOrders();
    const order = orders.find(o => o.id === orderId);
    
    if (!order) {
        alert('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!');
        return;
    }

    const itemsList = order.items.map(item => 
        `- ${item.name} x${item.quantity} = ${formatCurrency(item.price * item.quantity)}`
    ).join('\n');

    alert(`CHI TI·∫æT ƒê·ªöN H√ÄNG\n\nM√£ ƒë∆°n: ${order.id}\nKh√°ch h√†ng: ${order.customerName}\nS·ªë ƒëi·ªán tho·∫°i: ${order.phone}\nƒê·ªãa ch·ªâ: ${order.address}\n\nM√ìN ƒÇN:\n${itemsList}\n\nT·ªïng ti·ªÅn: ${formatCurrency(order.total)}\nTr·∫°ng th√°i: ${order.status}\nNg√†y ƒë·∫∑t: ${formatDate(order.createdAt)}`);
}

function updateOrderStatus(orderId) {
    const orders = getOrders();
    const orderIndex = orders.findIndex(o => o.id === orderId);
    
    if (orderIndex === -1) {
        alert('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!');
        return;
    }

    const statuses = ['M·ªõi', 'ƒêang x·ª≠ l√Ω', 'ƒêang giao', 'ƒê√£ giao', 'ƒê√£ h·ªßy'];
    const currentStatus = orders[orderIndex].status;
    const currentIndex = statuses.indexOf(currentStatus);
    
    const statusOptions = statuses.map((s, i) => `${i + 1}. ${s}${s === currentStatus ? ' (Hi·ªán t·∫°i)' : ''}`).join('\n');
    const choice = prompt(`Ch·ªçn tr·∫°ng th√°i m·ªõi:\n${statusOptions}\n\nNh·∫≠p s·ªë (1-5):`);
    
    if (choice && choice >= 1 && choice <= 5) {
        orders[orderIndex].status = statuses[choice - 1];
        orders[orderIndex].updatedAt = new Date().toISOString();
        saveOrders(orders);
        displayOrders();
        alert('C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!');
    }
}

function deleteOrder(orderId) {
    if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë∆°n h√†ng n√†y?')) {
        return;
    }

    let orders = getOrders();
    orders = orders.filter(o => o.id !== orderId);
    saveOrders(orders);
    displayOrders();
    alert('ƒê√£ x√≥a ƒë∆°n h√†ng!');
}

function displayMenuItems() {
    const menuItems = getMenuItems();
    const menuTableBody = document.getElementById('menu-table-body');
    
    if (!menuTableBody) return;

    menuTableBody.innerHTML = menuItems.map(item => `
        <tr>
            <td>${item.id}</td>
            <td><span style="font-size: 2rem;">${item.emoji}</span></td>
            <td>${item.name}</td>
            <td>${item.description}</td>
            <td>${formatCurrency(item.price)}</td>
            <td>
                <button class="btn-small btn-warning" onclick="editMenuItem(${item.id})">S·ª≠a</button>
                <button class="btn-small btn-danger" onclick="deleteMenuItem(${item.id})">X√≥a</button>
            </td>
        </tr>
    `).join('');
}

function showAddMenuForm() {
    document.getElementById('menu-form-title').textContent = 'Th√™m M√≥n M·ªõi';
    document.getElementById('menu-item-form').reset();
    document.getElementById('menu-item-id').value = '';
    document.getElementById('menu-form-section').style.display = 'block';
    document.getElementById('menu-item-name').focus();
}

function editMenuItem(itemId) {
    const menuItems = getMenuItems();
    const item = menuItems.find(i => i.id === itemId);
    
    if (!item) {
        alert('Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn!');
        return;
    }

    document.getElementById('menu-form-title').textContent = 'S·ª≠a M√≥n ƒÇn';
    document.getElementById('menu-item-id').value = item.id;
    document.getElementById('menu-item-name').value = item.name;
    document.getElementById('menu-item-description').value = item.description;
    document.getElementById('menu-item-price').value = item.price;
    document.getElementById('menu-item-emoji').value = item.emoji;
    document.getElementById('menu-item-gradient').value = item.gradient;
    document.getElementById('menu-form-section').style.display = 'block';
    document.getElementById('menu-item-name').focus();
}

function saveMenuItem(event) {
    event.preventDefault();
    
    const form = event.target;
    const itemId = document.getElementById('menu-item-id').value;
    const menuItems = getMenuItems();
    
    const itemData = {
        id: itemId ? parseInt(itemId) : Date.now(),
        name: form['item-name'].value.trim(),
        description: form['item-description'].value.trim(),
        price: parseInt(form['item-price'].value),
        emoji: form['item-emoji'].value.trim() || 'üçΩÔ∏è',
        gradient: form['item-gradient'].value.trim() || 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
    };

    if (!itemData.name || !itemData.description || !itemData.price) {
        alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!');
        return;
    }

    if (itemId) {
        const index = menuItems.findIndex(i => i.id === parseInt(itemId));
        if (index !== -1) {
            menuItems[index] = itemData;
        }
    } else {
        menuItems.push(itemData);
    }

    saveMenuItems(menuItems);
    displayMenuItems();
    cancelMenuForm();
    alert(itemId ? 'C·∫≠p nh·∫≠t m√≥n ƒÉn th√†nh c√¥ng!' : 'Th√™m m√≥n ƒÉn th√†nh c√¥ng!');
}

function cancelMenuForm() {
    document.getElementById('menu-form-section').style.display = 'none';
    document.getElementById('menu-item-form').reset();
}

function deleteMenuItem(itemId) {
    if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a m√≥n ƒÉn n√†y?')) {
        return;
    }

    let menuItems = getMenuItems();
    menuItems = menuItems.filter(i => i.id !== itemId);
    saveMenuItems(menuItems);
    displayMenuItems();
    alert('ƒê√£ x√≥a m√≥n ƒÉn!');
}

function getOrderStats() {
    const orders = getOrders();
    const stats = {
        total: orders.length,
        new: orders.filter(o => o.status === 'M·ªõi').length,
        processing: orders.filter(o => o.status === 'ƒêang x·ª≠ l√Ω').length,
        delivering: orders.filter(o => o.status === 'ƒêang giao').length,
        completed: orders.filter(o => o.status === 'ƒê√£ giao').length,
        cancelled: orders.filter(o => o.status === 'ƒê√£ h·ªßy').length,
        revenue: orders.filter(o => o.status === 'ƒê√£ giao').reduce((sum, o) => sum + o.total, 0)
    };
    return stats;
}

function displayStats() {
    const stats = getOrderStats();
    
    document.getElementById('stat-total-orders').textContent = stats.total;
    document.getElementById('stat-new-orders').textContent = stats.new;
    document.getElementById('stat-processing-orders').textContent = stats.processing;
    document.getElementById('stat-revenue').textContent = formatCurrency(stats.revenue);
}

function switchTab(tabName) {
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    document.getElementById(`${tabName}-tab`).classList.add('active');
}

document.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('orders-table-body')) {
        displayStats();
        displayOrders();
        displayMenuItems();

        const menuItemForm = document.getElementById('menu-item-form');
        if (menuItemForm) {
            menuItemForm.addEventListener('submit', saveMenuItem);
        }
    }
});
